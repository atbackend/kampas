# Generated by Django 5.2.4 on 2025-08-13 09:25

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import project_api.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('company_api', '0002_alter_company_options_alter_client_client_type'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CoordinateReferenceSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('proj_string', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='GroupType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='project_api.grouptype')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.CharField(default=project_api.models.generate_unique_id, editable=False, max_length=25, primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('quantity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unit', models.CharField(blank=True, choices=[('Kilometer', 'Kilometer'), ('Square Kilometer', 'Square Kilometer'), ('Count', 'Count')], max_length=50, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('In Progress', 'In Progress'), ('On Hold', 'On Hold'), ('Completed', 'Completed')], default='In Progress', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='company_api.client')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='company_api.company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_projects', to=settings.AUTH_USER_MODEL)),
                ('editors', models.ManyToManyField(blank=True, related_name='edited_projects', to=settings.AUTH_USER_MODEL)),
                ('managers', models.ManyToManyField(blank=True, related_name='managed_projects', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_projects', to=settings.AUTH_USER_MODEL)),
                ('project_head', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='headed_projects', to=settings.AUTH_USER_MODEL)),
                ('reviewers', models.ManyToManyField(blank=True, related_name='reviewed_projects', to=settings.AUTH_USER_MODEL)),
                ('viewers', models.ManyToManyField(blank=True, related_name='viewed_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Projects',
                'ordering': ['-created_at'],
                'unique_together': {('project_name', 'company')},
            },
        ),
        migrations.AddField(
            model_name='grouptype',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_types', to='project_api.project'),
        ),
        migrations.CreateModel(
            name='RasterGroupTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raster_group_tags', to='project_api.project')),
            ],
        ),
        migrations.CreateModel(
            name='VectorLayer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('geometry_type', models.CharField(choices=[('Point', 'Point'), ('LineString', 'LineString'), ('Polygon', 'Polygon'), ('MultiPoint', 'MultiPoint'), ('MultiLineString', 'MultiLineString'), ('MultiPolygon', 'MultiPolygon')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('crs', models.CharField(default='EPSG:4326', max_length=50)),
                ('geoserver_layer_name', models.CharField(blank=True, max_length=255)),
                ('geoserver_url', models.URLField(blank=True)),
                ('is_published', models.BooleanField(default=False)),
                ('s3_file_key', models.CharField(blank=True, max_length=500, null=True)),
                ('feature_count', models.IntegerField(default=0)),
                ('bbox', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when layer was marked for deletion', null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group_tags', models.ManyToManyField(blank=True, related_name='vector_layers', to='project_api.grouptag')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vector_layers', to='project_api.project')),
            ],
            options={
                'verbose_name_plural': 'Vector Layers',
                'ordering': ['-created_at'],
                'unique_together': {('project', 'name')},
            },
        ),
        migrations.CreateModel(
            name='VectorFeature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
                ('attributes', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('layer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='project_api.vectorlayer')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='RasterLayer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('s3_file_key', models.CharField(help_text='S3 key/path for the raster file', max_length=500)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('crs', models.CharField(blank=True, max_length=100, null=True)),
                ('bounding_box', models.JSONField(blank=True, null=True)),
                ('pixel_size', models.JSONField(blank=True, null=True)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('band_count', models.IntegerField(blank=True, null=True)),
                ('band_descriptions', models.JSONField(blank=True, null=True)),
                ('geoserver_layer_name', models.CharField(blank=True, max_length=255, null=True)),
                ('geoserver_url', models.URLField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when layer was marked for deletion', null=True)),
                ('group_tag', models.ManyToManyField(blank=True, to='project_api.rastergrouptag')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raster_layers', to='project_api.project')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Raster Layers',
                'ordering': ['-uploaded_at'],
                'unique_together': {('project', 'file_name')},
            },
        ),
        migrations.CreateModel(
            name='StreetImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('unique_filename', models.CharField(max_length=255, unique=True)),
                ('original_filename', models.CharField(max_length=255)),
                ('file_path', models.CharField(max_length=500)),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(help_text='Latitude in decimal degrees')),
                ('longitude', models.FloatField(help_text='Longitude in decimal degrees')),
                ('location', django.contrib.gis.db.models.fields.PointField(help_text='Geographic point location', srid=4326)),
                ('image_type', models.CharField(choices=[('front_view', 'Front View'), ('panorama', '360 Panorama'), ('side_view', 'Side View'), ('rear_view', 'Rear View')], default='front_view', max_length=20)),
                ('captured_at', models.DateTimeField(blank=True, null=True)),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_published', models.BooleanField(default=False)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='street_images', to='project_api.project')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-captured_at', '-uploaded_at'],
                'indexes': [models.Index(fields=['project'], name='project_api_project_4d4469_idx'), models.Index(fields=['location'], name='project_api_locatio_e805c8_idx'), models.Index(fields=['captured_at'], name='project_api_capture_fc64cb_idx'), models.Index(fields=['processing_status'], name='project_api_process_5a7295_idx')],
                'unique_together': {('project', 'latitude', 'longitude', 'unique_filename')},
            },
        ),
    ]
